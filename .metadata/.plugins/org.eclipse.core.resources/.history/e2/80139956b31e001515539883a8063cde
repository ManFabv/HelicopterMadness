package com.manrique.helicoptermadness;

import java.io.IOException;

import org.andengine.engine.camera.Camera;
import org.andengine.engine.options.EngineOptions;
import org.andengine.engine.options.ScreenOrientation;
import org.andengine.engine.options.WakeLockOptions;
import org.andengine.engine.options.resolutionpolicy.FillResolutionPolicy;
import org.andengine.engine.options.resolutionpolicy.IResolutionPolicy;
import org.andengine.entity.scene.Scene;


public class GameActivity extends org.andengine.ui.activity.BaseGameActivity 
{
	public static final int CAMERA_WIDTH = 800;
	public static final int CAMERA_HEIGHT = 480;
	
	public AnimatedPlayer jugador;

	@Override
	public EngineOptions onCreateEngineOptions() 
	{
		//esta camara define la parte de la escena que sera visible, y para
		//crearla tengo que definir el origen de la camara y el ancho y alto que usare como referencia al crear el juego
		//En este caso le estoy diciendo que ocupe desde el origen (0,0) hasta un cierto ancho y alto (definido por dos constantes)
		//NOTA: No hay que confundir la porcion visible de la escena que toma la camara, con la porcion 
		//de la pantalla que ocupa el juego (esto ultimo lo define el tipo de resolution policy mas adelante). 
		//Por decirlo con un ejemplo, puedo hacer que
		//la camara muestre todo el nivel del juego y sin embargo, todo se dibuja solo en una
		//porcion de la pantalla del dispositivo (como las peliculas con franjas negras arriba y abajo)
		Camera camera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);

		//esta variable me dira como va a escalar andengine el juego de acuerdo al tamaño de pantalla del dispositivo
		//donde va a correr el juego. En este caso va a cubrir toda la pantalla sin importar la relacion de aspecto, 
		//por lo que el juego puede verse un poco estirado en ciertas pantallas que no tengan la relacion de aspecto
		//con la que cree el juego (definida como camera_width y camera_height).
		//Hay otros tipos de resolution policy que tienen en cuenta la relacion de aspecto, entre otras opciones.
		IResolutionPolicy resolutionPolicy = new FillResolutionPolicy();

		EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.LANDSCAPE_SENSOR, resolutionPolicy, camera);

		engineOptions.getAudioOptions().setNeedsMusic(true).setNeedsSound(true);
		
		engineOptions.setWakeLockOptions(WakeLockOptions.SCREEN_ON);

		return engineOptions;
	}

	@Override
	public void onCreateResources(OnCreateResourcesCallback pOnCreateResourcesCallback)
		throws IOException {
		// TODO Auto-generated method stub
	}

	@Override
	public void onCreateScene(OnCreateSceneCallback pOnCreateSceneCallback)
		throws IOException {
		// TODO Auto-generated method stub
	}

	@Override
	public void onPopulateScene(Scene pScene, OnPopulateSceneCallback pOnPopulateSceneCallback)
		throws IOException {
		// TODO Auto-generated method stub
	}
}